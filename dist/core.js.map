{"version":3,"sources":["../src/core/_Base.ts","../src/core/utils.ts","../src/core/Observable.ts","../src/core/ObservableList.ts","../src/core/ObservableMap.ts"],"sourcesContent":["export default abstract class Base<T> {\n  protected _listeners: Set<(value: T) => void>;\n  public _value: T;\n\n  constructor(value: T) {\n    this._value = value;\n    this._listeners = new Set();\n  }\n\n  public abstract set(value: T | ((value: T) => T)): void;\n\n  public abstract get(): T;\n\n  public abstract subscribe(fn: (value: T) => void): () => void;\n\n  public abstract unsubscribe(fn: (value: T) => void): void;\n\n  public abstract emit(): void;\n\n  get [Symbol.toStringTag]() {\n    return \"Observable\";\n  }\n\n  [Symbol.toPrimitive](hint: string) {\n    if (hint === \"number\") return Number(this._value);\n    if (hint === \"string\")\n      return typeof this._value === \"object\"\n        ? JSON.stringify(this._value)\n        : `${this._value}`;\n    return true;\n  }\n}\n","export function resolve<T, W = T>(next: T | ((value: W) => T), prev: W) {\n  if (next instanceof Function) {\n    return next(prev);\n  } else {\n    return next;\n  }\n}\n","import Base from \"./_Base\";\nimport { resolve } from \"./utils\";\n\ninterface Get<T> {\n  (): T;\n  <W>(callback: (value: T) => W): W;\n}\n\nexport default class Observable<T> extends Base<T> {\n  public set(value: T | ((value: T) => T)) {\n    this._value = resolve(value, this.get());\n    this.emit();\n  }\n\n  public get: Get<T> = <W>(callback?: (value: T) => W) => {\n    if (callback) {\n      return callback(this._value);\n    }\n    return this._value;\n  };\n\n  public subscribe(fn: (value: T) => void): () => void {\n    this._listeners.add(fn);\n\n    return () => {\n      this.unsubscribe(fn);\n    };\n  }\n\n  public unsubscribe(fn: (value: T) => void) {\n    this._listeners.delete(fn);\n  }\n\n  public emit() {\n    this._listeners.forEach((fn) => {\n      fn(this.get());\n    });\n  }\n}\n","import Observable from \"./Observable\";\nimport { resolve } from \"./utils\";\n\nexport default class ObservableList<T> extends Observable<Array<T>> {\n  private _indexListeners: Map<number, Set<(value: T | undefined) => void>> =\n    new Map();\n\n  public emitIndexes() {\n    for (const [index, listeners] of this._indexListeners) {\n      listeners.forEach((fn) => {\n        fn(this.getItem(index));\n      });\n    }\n  }\n\n  public getItem(index: number): T | undefined {\n    return this._value[index];\n  }\n\n  public setItem(index: number, value: T | ((value: T | undefined) => T)) {\n    this._value[index] = resolve(value, this.getItem(index));\n    this.emitIndex(index);\n  }\n\n  public addItem(value: T) {\n    this._value.push(value);\n    this.emitIndex(this._value.length - 1);\n  }\n\n  public removeItem(index: number) {\n    if (index < 0 || index >= this._value.length) return;\n    this._value.splice(index, 1);\n    this.emitIndex(index);\n  }\n\n  public clear() {\n    this._value = [];\n    this.emit();\n  }\n\n  public emit() {\n    this._listeners.forEach((fn) => {\n      fn(this.get());\n    });\n\n    for (const [key, listeners] of this._indexListeners) {\n      listeners.forEach((fn) => {\n        fn(this.getItem(key));\n      });\n    }\n  }\n\n  public emitIndex(index: number) {\n    this._indexListeners.get(index)?.forEach((fn) => {\n      fn(this.getItem(index));\n    });\n\n    this._listeners.forEach((fn) => {\n      fn(this.get());\n    });\n  }\n\n  public subscribeIndex(\n    index: number,\n    fn: (value: T | undefined) => void,\n  ): () => void {\n    if (!this._indexListeners.has(index)) {\n      this._indexListeners.set(index, new Set());\n    }\n\n    const listeners = this._indexListeners.get(index);\n    if (listeners) {\n      listeners.add(fn);\n    }\n    return () => {\n      this.unsubscribeIndex(index, fn);\n    };\n  }\n\n  public unsubscribeIndex(index: number, fn: (value: T | undefined) => void) {\n    if (!this._indexListeners.has(index)) return;\n\n    const listeners = this._indexListeners.get(index);\n    if (listeners) {\n      listeners.delete(fn);\n    }\n  }\n\n  *[Symbol.iterator]() {\n    for (let i = 0; i < this._value.length; i++) {\n      yield this.getItem(i) as T;\n    }\n  }\n\n  *map<W>(callback: (entry: [number, T]) => W) {\n    for (const [i] of this._value.entries()) {\n      yield callback([i, this.getItem(i) as T]);\n    }\n  }\n  async *mapAsync<W>(callback: (entry: [number, T]) => Promise<W>) {\n    for (const [i] of this._value.entries()) {\n      yield await callback([i, this.getItem(i) as T]);\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return \"ObservableList\";\n  }\n}\n","import Observable from \"./Observable\";\nimport { resolve } from \"./utils\";\n\nexport default class ObservableMap<\n  K extends string | number | bigint,\n  T,\n> extends Observable<Map<K, T>> {\n  private _keyListeners: Map<K, Set<(value: T | undefined) => void>> =\n    new Map();\n\n  constructor(rawValue: [K, T][] | Map<K, T>) {\n    super(Array.isArray(rawValue) ? new Map(rawValue) : rawValue);\n  }\n\n  public set(\n    value:\n      | ([K, T][] | Map<K, T>)\n      | ((value: Map<K, T>) => [K, T][] | Map<K, T>),\n  ) {\n    const next = resolve(value, this.get());\n    const v = Array.isArray(next) ? new Map(next) : next;\n    super.set(v);\n  }\n\n  public removeItem(key: K) {\n    this._value.delete(key);\n\n    this.emitKey(key);\n  }\n\n  public clear() {\n    this._value.clear();\n\n    this.emit();\n  }\n\n  public getItem(key: K) {\n    return this._value.get(key);\n  }\n\n  public setItem(key: K, value: T | ((value: T | undefined) => T)) {\n    this._value.set(key, resolve(value, this.getItem(key)));\n    this.emitKey(key);\n  }\n\n  public emit() {\n    this._listeners.forEach((fn) => {\n      fn(this.get());\n    });\n\n    for (const [key, listeners] of this._keyListeners) {\n      listeners.forEach((fn) => {\n        fn(this.getItem(key));\n      });\n    }\n  }\n\n  public emitKey(key: K) {\n    this._keyListeners.get(key)?.forEach((fn) => {\n      fn(this.getItem(key));\n    });\n\n    this._listeners.forEach((fn) => {\n      fn(this.get());\n    });\n  }\n\n  public subscribeKey(key: K, fn: (value: T | undefined) => void): () => void {\n    if (!this._keyListeners.has(key)) {\n      this._keyListeners.set(key, new Set());\n    }\n\n    const listeners = this._keyListeners.get(key);\n    if (listeners) {\n      listeners.add(fn);\n    }\n\n    return () => {\n      this.unsubscribeKey(key, fn);\n    };\n  }\n\n  public unsubscribeKey(key: K, fn: (value: T | undefined) => void) {\n    if (!this._keyListeners.has(key)) return;\n\n    const listeners = this._keyListeners.get(key);\n    if (listeners) {\n      listeners.delete(fn);\n    }\n  }\n\n  *[Symbol.iterator]() {\n    for (const [k] of this._value) {\n      yield [k, this.getItem(k) as T];\n    }\n  }\n\n  *map<W>(callback: (entry: [K, T]) => W) {\n    for (const [k] of this._value) {\n      yield callback([k, this.getItem(k) as T]);\n    }\n  }\n  async *mapAsync<W>(callback: (entry: [K, T]) => Promise<W>) {\n    for (const [k] of this._value) {\n      yield await callback([k, this.getItem(k) as T]);\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return \"ObservableMap\";\n  }\n}\n"],"mappings":"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","names":[]}