{"version":3,"sources":["../src/index.ts","../src/_Base.ts","../src/utils.ts","../src/Observable.ts","../src/ObservableList.ts","../src/ObservableMap.ts"],"sourcesContent":["import Observable from \"./Observable\";\nimport ObservableList from \"./ObservableList\";\nimport ObservableMap from \"./ObservableMap\";\n\nexport { Observable, ObservableList, ObservableMap };\n","export default abstract class Base<T> {\n  protected _listeners: Set<(value: T) => void>;\n  public _value: T;\n\n  constructor(value: T) {\n    this._value = value;\n    this._listeners = new Set();\n  }\n\n  public abstract set(value: T | ((value: T) => T)): void;\n\n  public abstract get(): T;\n\n  public abstract subscribe(fn: (value: T) => void): () => void;\n\n  public abstract unsubscribe(fn: (value: T) => void): void;\n\n  public abstract notify(): void;\n\n  [Symbol.toPrimitive](hint: string) {\n    if (hint === \"number\") return Number(this._value);\n    if (hint === \"string\")\n      return typeof this._value === \"object\"\n        ? JSON.stringify(this._value)\n        : `${this._value}`;\n    return true;\n  }\n}\n","export function resolve<T, W = T>(next: T | ((value: W) => T), prev: W) {\n  if (next instanceof Function) {\n    return next(prev);\n  } else {\n    return next;\n  }\n}\n","import Base from \"./_Base\";\nimport { resolve } from \"./utils\";\n\ninterface Get<T> {\n  (): T;\n  <W>(accessor: (value: T) => W): W;\n}\n\nexport default class Observable<T> extends Base<T> {\n  public set(value: T | ((value: T) => T)) {\n    this._value = resolve(value, this.get());\n    this.notify();\n  }\n\n  // Allow consumers to read the value directly or derive another shape from it in a single pass.\n  public get: Get<T> = <W>(accessor?: (value: T) => W) => {\n    if (accessor) {\n      return accessor(this._value);\n    }\n    return this._value;\n  };\n\n  public subscribe(fn: (value: T) => void): () => void {\n    this._listeners.add(fn);\n    return () => {\n      this.unsubscribe(fn);\n    };\n  }\n\n  public unsubscribe(fn: (value: T) => void) {\n    this._listeners.delete(fn);\n  }\n\n  public notify() {\n    this._listeners.forEach((fn) => {\n      fn(this.get());\n    });\n  }\n\n  // Keeps `Object.prototype.toString.call(new Observable())` descriptive.\n  get [Symbol.toStringTag]() {\n    return \"Observable\";\n  }\n}\n","import Observable from \"./Observable\";\nimport { resolve } from \"./utils\";\n\ninterface GetEntry<T> {\n  (index: number): T | undefined;\n  <W>(index: number, accessor: (value: T | undefined) => W): W;\n}\n\nexport default class ObservableList<T> extends Observable<Array<T>> {\n  private _indexListeners: Map<number, Set<(value: T | undefined) => void>> =\n    new Map();\n\n  // Keeps the broadcast to list-wide subscribers in one place so we can ensure\n  // they only fire once per mutation.\n  private notifyAllSubscribers() {\n    this._listeners.forEach((fn) => {\n      fn(this.get());\n    });\n  }\n\n  // Emits the latest value for a particular index and mirrors the change to the\n  // aggregate listeners immediately after.\n  private notifyEntrySubscribers(index: number) {\n    this._indexListeners.get(index)?.forEach((fn) => {\n      fn(this.getEntry(index));\n    });\n    this.notifyAllSubscribers();\n  }\n\n  // When an entry is removed, every following index shifts left; re-emit all of\n  // them so that consumers tracking a given position stay in sync.\n  private notifyShiftedEntries(fromIndex: number) {\n    for (const [index, listeners] of this._indexListeners) {\n      if (index < fromIndex) continue;\n      listeners.forEach((fn) => {\n        fn(this.getEntry(index));\n      });\n    }\n    this.notifyAllSubscribers();\n  }\n\n  private ensureIndexListeners(index: number) {\n    if (!this._indexListeners.has(index)) {\n      this._indexListeners.set(index, new Set());\n    }\n    return this._indexListeners.get(index)!;\n  }\n\n  public getEntry: GetEntry<T> = <W>(\n    index: number,\n    accessor?: (value: T | undefined) => W,\n  ) => {\n    const value = this._value[index];\n    return accessor ? accessor(value) : value;\n  };\n\n  public setEntry(index: number, value: T | ((value: T | undefined) => T)) {\n    this._value[index] = resolve(value, this.getEntry(index));\n    this.notifyEntrySubscribers(index);\n  }\n\n  public addEntry(value: T) {\n    this._value.push(value);\n    this.notifyEntrySubscribers(this._value.length - 1);\n  }\n\n  public removeEntry(index: number) {\n    if (index < 0 || index >= this._value.length) return;\n    this._value.splice(index, 1);\n    this.notifyShiftedEntries(index);\n  }\n\n  public clear() {\n    this._value = [];\n    this.notify();\n  }\n\n  public notify() {\n    this.notifyAllSubscribers();\n    for (const [index, listeners] of this._indexListeners) {\n      listeners.forEach((fn) => {\n        fn(this.getEntry(index));\n      });\n    }\n  }\n\n  public subscribeEntry(\n    index: number,\n    fn: (value: T | undefined) => void,\n  ): () => void {\n    this.ensureIndexListeners(index).add(fn);\n    return () => {\n      this.unsubscribeEntry(index, fn);\n    };\n  }\n\n  public unsubscribeEntry(index: number, fn: (value: T | undefined) => void) {\n    if (!this._indexListeners.has(index)) return;\n    const listeners = this._indexListeners.get(index);\n    if (listeners) {\n      listeners.delete(fn);\n    }\n  }\n\n  *[Symbol.iterator]() {\n    for (let i = 0; i < this._value.length; i++) {\n      yield this.getEntry(i) as T;\n    }\n  }\n\n  *map<W>(callback: (entry: [number, T]) => W) {\n    for (const [i] of this._value.entries()) {\n      yield callback([i, this.getEntry(i) as T]);\n    }\n  }\n  async *mapAsync<W>(callback: (entry: [number, T]) => Promise<W>) {\n    for (const [i] of this._value.entries()) {\n      yield await callback([i, this.getEntry(i) as T]);\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return \"ObservableList\";\n  }\n}\n","import Observable from \"./Observable\";\nimport { resolve } from \"./utils\";\n\ninterface GetEntry<K, T> {\n  (key: K): T | undefined;\n  <W>(key: K, accessor: (value: T | undefined) => W): W;\n}\n\nexport default class ObservableMap<K, T> extends Observable<Map<K, T>> {\n  private _keyListeners: Map<K, Set<(value: T | undefined) => void>> =\n    new Map();\n\n  // Keeps the whole-map subscribers centralised so we do not accidentally\n  // notify them multiple times for the same mutation.\n  private notifyAllSubscribers() {\n    this._listeners.forEach((fn) => {\n      fn(this.get());\n    });\n  }\n\n  // Make sure key-specific observers get the latest value before the map-wide\n  // subscribers so they always react to coherent data.\n  private notifyEntrySubscribers(key: K) {\n    this._keyListeners.get(key)?.forEach((fn) => {\n      fn(this.getEntry(key));\n    });\n    this.notifyAllSubscribers();\n  }\n\n  private ensureKeyListeners(key: K) {\n    if (!this._keyListeners.has(key)) {\n      this._keyListeners.set(key, new Set());\n    }\n    return this._keyListeners.get(key)!;\n  }\n\n  constructor(rawValue: [K, T][] | Map<K, T>) {\n    super(Array.isArray(rawValue) ? new Map(rawValue) : rawValue);\n  }\n\n  public set(\n    value:\n      | ([K, T][] | Map<K, T>)\n      | ((value: Map<K, T>) => [K, T][] | Map<K, T>),\n  ) {\n    const next = resolve(value, this.get());\n    const v = Array.isArray(next) ? new Map(next) : next;\n    super.set(v);\n  }\n\n  // Remove the entry and only notify subscribers if something actually changed.\n  public removeEntry(key: K) {\n    const didRemove = this._value.delete(key);\n    if (!didRemove) return;\n    this.notifyEntrySubscribers(key);\n  }\n\n  public clear() {\n    this._value.clear();\n    this.notify();\n  }\n\n  public getEntry: GetEntry<K, T> = <W>(\n    key: K,\n    accessor?: (value: T | undefined) => W,\n  ) => {\n    const value = this._value.get(key);\n    return accessor ? accessor(value) : value;\n  };\n\n  public setEntry(key: K, value: T | ((value: T | undefined) => T)) {\n    this._value.set(key, resolve(value, this.getEntry(key)));\n    this.notifyEntrySubscribers(key);\n  }\n\n  public notify() {\n    this.notifyAllSubscribers();\n    for (const [key, listeners] of this._keyListeners) {\n      listeners.forEach((fn) => {\n        fn(this.getEntry(key));\n      });\n    }\n  }\n\n  public subscribeEntry(\n    key: K,\n    fn: (value: T | undefined) => void,\n  ): () => void {\n    this.ensureKeyListeners(key).add(fn);\n    return () => {\n      this.unsubscribeEntry(key, fn);\n    };\n  }\n\n  public unsubscribeEntry(key: K, fn: (value: T | undefined) => void) {\n    if (!this._keyListeners.has(key)) return;\n    const listeners = this._keyListeners.get(key);\n    if (listeners) {\n      listeners.delete(fn);\n    }\n  }\n\n  *[Symbol.iterator]() {\n    for (const [k] of this._value) {\n      yield [k, this.getEntry(k) as T];\n    }\n  }\n\n  *map<W>(callback: (entry: [K, T]) => W) {\n    for (const [k] of this._value) {\n      yield callback([k, this.getEntry(k) as T]);\n    }\n  }\n  async *mapAsync<W>(callback: (entry: [K, T]) => Promise<W>) {\n    for (const [k] of this._value) {\n      yield await callback([k, this.getEntry(k) as T]);\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return \"ObservableMap\";\n  }\n}\n"],"mappings":"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","names":[]}